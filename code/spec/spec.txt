Python:
- Python-Reader
- Python-Backend

Backend:
- Definition pseudo_id: Random hex number; 16 bytes long.
- Definition of message status codes: in /backendServer/config/message_codes.js

Smartphone:
-Schlüsselgenerierung RSA - 2048
-AES256 
-->siehe TestResources generate-ssl-certs.sh
-Speicherung public Key Backend B (statisch eincodiert)
-Speicherung public Key Reader R (statisch eincodiert)

Ablauf:
-Verbindung mit Backend (Return Token)
-Key Generation
-Verbindungsaufbau mit Backend (ID, Token, Public Key U) HTTPS
-Handshake mit Reader



>>> Interface Smartphone-Backend:

- Step 1: Register tum_id. Ask for token.
  Request: 	GET /register?tum_id=ga00aaa
  Answer:	Message with JSON body
		{ status: 200,
		  code: 0, //OK
		  message: 'Token generation successful. Please send public key.',
		  tum_id: 'ga00aaa',
		  pseudo_id: '44554dab23950a6b81c0621b9dc98899',
		  token: '491652672440A20D6BD49B63E60DADB9' }
  Error possibility: 	No key 'tum_id' in request
  Answer:	{ status: 400,
		  code: 20, //ARG_MISS
		  message: 'Please set tum_id in the HTTPS request!' }
  Error possibility: 	'tum_id' in request does not have the correct form
  Answer:	{ status: 400,
		  code: 21, //ARG_FORM
		  message: 'tum_id does not have the correct form!' }
  Error possibility: 	'tum_id' in request formally correct, 
			but TUMonline does not respond token
  Answer:	{ status: 404,
		  code: 30, //TUM_NO_TOK
		  message: 'TUMonline did not answer with a token for this tum_id!' }
  Error possibility:	There is already a token for this tum_id
		{ status: 400,
		  code: 31, //TUM_DUP_TOK
		  message: 'There is already a token for this user.' }	
  Error possibility:	TumOnline is sending error messages or not behaving properly
		{ status: 500,
		  code: 39, //TUM_ERR
		  message: 'TUMonline is not behaving properly.' }	

- Step 2: Check if the user has activated his token in TumOnline
  Request:	GET /tokenactive?token=491652672440A20D6BD49B63E60DADB9
  Answer:	Message with JSON body
		{ status: 200,
		  code: 0, //OK
		  active: true,
		  message: 'Token is activated.' }
  Answer possibility 2: 
		{ status: 200,
		  code: 0, //OK
		  active: false,
		  message: 'Token is not activated.' }

- Step 3: Hand over public key for storage on the backend.
  Request: 	POST /register
		Content-Type: 'application/json'
		Message body:
		{ tum_id: 'ga00aaa',
		  token: '491652672440A20D6BD49B63E60DADB9',
		  key: 
		   '00c758d041eb5214eb80acefdda586b8cf33e9a6b63ddea1c5cdc5ed3df2
                    bfb1151f29fd2e50416198fc81a914dad0242aaa4de95ea17520b40a9259
                    bbf3e396ad1939d9287fbeba40dda79720558b40f9de3a666132179a87d9
                    8c53aa6dbc90cb85f4337d1fda91cc618db74b6a5759f596cdd472320fe4
                    69f0576f94f8cbd0675e267ae6ce68804c9567ed49f02499fba68b5f677c
                    62f56d45e6f2763b163c3c8c093bb1375fd81276cfa3fd4ba61823e3393a
                    3d7c3ca85596bbe9723e66ae9755a1a5d87e9fd4ba89a48067fa384ef07f
                    903068394b766ff87aa161a90e0976e323bd85dae27a423a85b13f86f79c
                    ef986c62910d896144653f10dc14b98f83' } 
  Answer:	Message with JSON body
		{ status: 200,
		  code: 0, //OK
		  message: 'Key stored successfully. User registration complete.' }
  Error possibility:	tum_id, token or key missing in the request
  Answer:	{ status: 400,
		  code: 20, //ARG_MISS
		  message: 'Please set tum_id, token and key in the request!' }
  Error possibility:	tum_id, token or key do not have the correct format
  Answer:	{ status: 400,
		  code: 21, //ARG_FORM
		  message: 'tum_id, token or key do not have the correct form!' }
  Error possibility:	token in the request does not equal the one in the DB
  Answer:	{ status: 400,
		  code: 11, //WRONG_TOK
		  message: 'token seems to be wrong!' }
  Error possibility:	tum_id is not found in the DB
  Answer:	{ status: 404,
		  code: 10, //NO_USR
		  message: 'tum_id not found in DB. Please start with step 1!' }

- Step 88:	The smartphone wants to renew the user's pseudo_id.
		Makes sense to get some privacy. Makes it hard for readers to track the user.
  Request:	GET /renew?tum_id=ga00aaa&token=491652672440A20D6BD49B63E60DADB9
  Answer:	{ status: 200,
		  code: 0, //OK
		  pseudo_id: 44554dab23950a6b81c0621b9dc98899,
		  message: 'Here is your new pseudo_id.' }
  Error possibilities: See other requests. Possible: ARG_MISS, ARG_FORM, NO_USR, WRONG_TOK

- Step 99: 	If the user wants to delete his account.
	There might be several reasons for this:
		- he really wants it
		- he unintentionally deleted his token in TUMonline
		- nice for testing
	To make sure that some evil user cannot delete arbitrary accounts, we
	distinguish two cases: 
		1.) token is not active in TUMonline or has been deleted
			-> everybody can delete the account
		2.) token is still active in TUMonline
			-> the user additionally has to send the token. Nobody
			   exept the user himself should know this token.

  Request possibility 1.) GET /remove?tum_id=ga00aaa
  Request possibility 2.) GET /remove?tum_id=ga00aaa&token=491652672440A20D6BD49B63E60DADB9
  Answer:	{ status: 200,
		  code: 0, //OK
		  message: 'Account has been deleted.' }
  Error possibility:	Token still active in TUMonline but no token in the request.
		{ status: 403,
		  code: 20, //ARG_MISS
		  message: 'Your token is still active. Plese send a request with the token.' }
  Error possibility:	Argument missing.
		{ status: 400,
		  code: 20, //ARG_MISS
		  message: 'Request argument missing.' }
  Error possibility:	Argument does not have the correct form.
		{ status: 400,
		  code: 21, //ARG_FORM
		  message: 'Request argument does not have the correct form.' }

>>> Interface Reader-Backend:

- Smartphone sent its pseudo ID. Now ask backend for the corresponding public key.
  Request:	GET /check?pseudo_id=sdifuz563
  Answer:	Message with JSON body
		{ status: 200,
		  code: 0, //OK
		  message: 'Valid user. Sending public key.',
		  pseudo_id: '44554dab23950a6b81c0621b9dc98899',
		  student_status: 'student',
		  key: 
		   '00c758d041eb5214eb80acefdda586b8cf33e9a6b63ddea1c5cdc5ed3df2
                    bfb1151f29fd2e50416198fc81a914dad0242aaa4de95ea17520b40a9259
                    bbf3e396ad1939d9287fbeba40dda79720558b40f9de3a666132179a87d9
                    8c53aa6dbc90cb85f4337d1fda91cc618db74b6a5759f596cdd472320fe4
                    69f0576f94f8cbd0675e267ae6ce68804c9567ed49f02499fba68b5f677c
                    62f56d45e6f2763b163c3c8c093bb1375fd81276cfa3fd4ba61823e3393a
                    3d7c3ca85596bbe9723e66ae9755a1a5d87e9fd4ba89a48067fa384ef07f
                    903068394b766ff87aa161a90e0976e323bd85dae27a423a85b13f86f79c
                    ef986c62910d896144653f10dc14b98f83' } 
  Error possibility:	pseudo_id not found in DB
  Answer:	{ status: '404',
		  code: 10, //NO_USR
		  message: 'This pseudo_id does not exist!' }
  Error possibility:	Corresponding DB entry has no key -> registration not finished
  Answer:	{ status: '404',
		  code: 12, //NO_KEY
		  message: 'No key for this pseudo_id!' }
  Error possibility:	The corresponding person is no longer a student
  Answer:	{ status: '403',
		  code: 5, //FORBIDDEN
		  message: 'This person is no longer a student!' }
  Error possibility:	pseudo_id has the wrong format
  Answer:	{ status: '400',
		  code: 21, //ARG_FORM
		  message: 'pseudo_id does not have the correct form!' }
  Error possibility:	Connection to AD does not work or results in strange errors.
  Answer:	{ status: 500,
		  code: 39, //TUM_ERR
		  message: 'Active Directory is not behaving properly.' }	



>>> General server error message:
  Could happen if the server runs into an internal error and cannot respond anymore.
  Answer:	{ status: 500, code: 9 //ERR, message: <some message> }

